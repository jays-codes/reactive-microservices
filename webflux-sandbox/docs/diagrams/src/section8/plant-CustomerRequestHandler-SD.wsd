@startuml CustomerRequestHandler Sequence Diagram

actor Client
participant "RouterConfiguration" as Router
participant "CustomerRequestHandler" as Handler
participant "RequestValidator" as Validator
participant "ICustomerService" as Service
participant "ApplicationExceptions" as Exceptions

== GET /customers ==
Client -> Router: GET /customers
Router -> Handler: getAllCustomers(request)
Handler -> Service: getAllCustomers()
Service --> Handler: Flux<CustomerDTO>
Handler --> Router: Mono<ServerResponse>
Router --> Client: 200 OK with customers

== POST /customers ==
Client -> Router: POST /customers
Router -> Handler: saveCustomer(request)
Handler -> Handler: bodyToMono(CustomerDTO)
Handler -> Validator: validate()
Validator --> Handler: Mono<CustomerDTO>
Handler -> Service: saveCustomer(validatedCustomer)
Service --> Handler: Mono<CustomerDTO>
Handler --> Router: Mono<ServerResponse>
Router --> Client: 200 OK with saved customer

== PUT /customers/{id} ==
Client -> Router: PUT /customers/{id}
Router -> Handler: updateCustomer(request)
Handler -> Handler: parse id from path
Handler -> Handler: bodyToMono(CustomerDTO)
Handler -> Validator: validate()
Validator --> Handler: Mono<CustomerDTO>
Handler -> Service: updateCustomer(id, validatedCustomer)
alt Customer Found
    Service --> Handler: Mono<CustomerDTO>
    Handler --> Router: Mono<ServerResponse>
    Router --> Client: 200 OK with updated customer
else Customer Not Found
    Service --> Handler: Mono.empty()
    Handler -> Exceptions: customerNotFound(id)
    Exceptions --> Handler: Mono.error()
    Handler --> Router: Mono<ServerResponse>
    Router --> Client: 404 Not Found
end

@enduml 