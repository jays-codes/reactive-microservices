@startuml Request Validation Flow

actor Client
participant "CustomerController" as Controller
participant "RequestValidator" as Validator
participant "ApplicationExceptions" as Exceptions

Client -> Controller: POST /customers with CustomerDTO
activate Controller

Controller -> Controller: saveCustomer(Mono<CustomerDTO>)
activate Controller #DarkSalmon

Controller -> Validator: transform(RequestValidator.validate())
activate Validator

Validator -> Validator: mono.filter(hasName())
note right: Checks if name is not null

alt Name is null
    Validator -> Exceptions: missingName()
    activate Exceptions
    Exceptions --> Validator: Mono.error(InvalidInputException)
    deactivate Exceptions
    Validator --> Controller: Error Mono
else Name is not null
    Validator -> Validator: filter(hasValidEmail())
    note right: Checks if email is not null and contains @
    
    alt Email is invalid
        Validator -> Exceptions: missingEmail()
        activate Exceptions
        Exceptions --> Validator: Mono.error(InvalidInputException)
        deactivate Exceptions
        Validator --> Controller: Error Mono
    else Email is valid
        Validator --> Controller: Valid CustomerDTO Mono
    end
end

deactivate Validator

Controller -> Controller: as(service::saveCustomer)
note right: Passes validated CustomerDTO to service

Controller --> Client: HTTP response with CustomerDTO or error
deactivate Controller #DarkSalmon
deactivate Controller

@enduml