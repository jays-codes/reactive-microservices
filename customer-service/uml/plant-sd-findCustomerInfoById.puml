@startuml
actor Client
participant "CustomerServiceImpl" as Service
participant "CustomerRepository" as Repo
participant "ApplicationExceptions" as Exceptions
participant "PortfolioItemRepository" as PortfolioRepo
participant "CustomerMapper" as Mapper

Client -> Service: findCustomerInfoById(id)
activate Service
Service -> Repo: findById(id)
activate Repo
Repo --> Service: Mono<Customer>
deactivate Repo
alt Customer found
    Service -> Service: getCustomerInfo(Customer)
    Service -> PortfolioRepo: findAllByCustomerId(customer.id)
    activate PortfolioRepo
    PortfolioRepo --> Service: Flux<PortfolioItem>
    deactivate PortfolioRepo
    Service -> Mapper: toCustomerInfo(Customer, List<PortfolioItem>)
    activate Mapper
    Mapper --> Service: CustomerInfo
    deactivate Mapper
    Service --> Client: Mono<CustomerInfo>
else Customer not found
    Service -> Exceptions: customerNotFound(id)
    activate Exceptions
    Exceptions --> Service: Mono.error(CustomerNotFoundException)
    deactivate Exceptions
    Service --> Client: Mono.error(CustomerNotFoundException)
end
deactivate Service
@enduml 